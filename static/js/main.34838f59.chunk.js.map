{"version":3,"sources":["hoc/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["Layout","arr","randomStyle","Math","floor","random","length","figure","randomFigure","arr2","randomStyle2","figure2","randomFigure2","arr3","randomStyle3","figure3","randomFigure3","className","classNames","Component","App","bridge","send","subscribe","e","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kQAgDeA,E,uKAxCT,IAAMC,EAAM,CAAC,OAAQ,OAAQ,SACvBC,EAAcD,EAAIE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAIK,SAEjDC,EAAS,CAAC,SAAU,UACpBC,EAAeD,EAAOJ,KAAKC,MAAMD,KAAKE,SAAWE,EAAOD,SAExDG,EAAO,CAAC,OAAQ,OAAQ,SACxBC,EAAeD,EAAKN,KAAKC,MAAMD,KAAKE,SAAWI,EAAKH,SAEpDK,EAAU,CAAC,SAAU,UACrBC,EAAgBD,EAAQR,KAAKC,MAAMD,KAAKE,SAAWM,EAAQL,SAE3DO,EAAO,CAAC,OAAQ,OAAQ,SACxBC,EAAeD,EAAKV,KAAKC,MAAMD,KAAKE,SAAWQ,EAAKP,SAEpDS,EAAU,CAAC,SAAU,UACrBC,EAAgBD,EAAQZ,KAAKC,MAAMD,KAAKE,SAAWU,EAAQT,SAEjE,OACG,yBAAKW,UAAW,UACb,yBAAKA,UAAW,SAAhB,mBACA,yBAAKA,UAAW,cACb,yBAAKA,UAAWC,IAAWhB,EAAaM,IACrC,yBAAKS,UAAW,SAAhB,QACA,yBAAKA,UAAW,QAAhB,WAEH,yBAAKA,UAAWC,IAAWR,EAAcE,IACtC,yBAAKK,UAAW,SAAhB,QACA,yBAAKA,UAAW,QAAhB,WAEH,yBAAKA,UAAWC,IAAWJ,EAAcE,IACtC,yBAAKC,UAAW,SAAhB,cACA,yBAAKA,UAAW,QAAhB,iB,GApCGE,a,gBCcNC,E,kLAXXC,IAAOC,KAAK,eAAgB,IAC5BD,IAAOE,WAAU,SAACC,GAAD,OAAOC,QAAQC,IAAIF,Q,+BAIpC,OACG,kBAAC,EAAD,U,GATWL,aCQEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,a","file":"static/js/main.34838f59.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport './Layout.scss'\r\nimport classNames from 'classnames'\r\n\r\nclass Layout extends Component {\r\n   render() {\r\n\r\n      //first color\r\n      const arr = ['pink', 'blue', 'green']\r\n      const randomStyle = arr[Math.floor(Math.random() * arr.length)]\r\n\r\n      const figure = ['square', 'circle']\r\n      const randomFigure = figure[Math.floor(Math.random() * figure.length)]\r\n      //second color\r\n      const arr2 = ['pink', 'blue', 'green']\r\n      const randomStyle2 = arr2[Math.floor(Math.random() * arr2.length)]\r\n\r\n      const figure2 = ['square', 'circle']\r\n      const randomFigure2 = figure2[Math.floor(Math.random() * figure2.length)]\r\n      //third color\r\n      const arr3 = ['pink', 'blue', 'green']\r\n      const randomStyle3 = arr3[Math.floor(Math.random() * arr3.length)]\r\n\r\n      const figure3 = ['square', 'circle']\r\n      const randomFigure3 = figure3[Math.floor(Math.random() * figure3.length)]\r\n\r\n      return (\r\n         <div className={\"Layout\"}>\r\n            <div className={\"Title\"}>Most used timer</div>\r\n            <div className={\"LayoutMost\"}>\r\n               <div className={classNames(randomStyle, randomFigure)}>\r\n                  <div className={\"title\"}>Test</div>\r\n                  <div className={\"time\"}>15 min</div>\r\n               </div>\r\n               <div className={classNames(randomStyle2, randomFigure2)}>\r\n                  <div className={\"title\"}>Name</div>\r\n                  <div className={\"time\"}>50 min</div>\r\n               </div>\r\n               <div className={classNames(randomStyle3, randomFigure3)}>\r\n                  <div className={\"title\"}>Some title</div>\r\n                  <div className={\"time\"}>35 min</div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      )\r\n   }\r\n}\r\n\r\nexport default Layout","import React, {Component} from 'react'\nimport Layout from \"./hoc/Layout/Layout\"\nimport bridge from '@vkontakte/vk-bridge'\n\nclass App extends Component {\n\n  componentDidMount() {\n    bridge.send(\"VKWebAppInit\", {});\n    bridge.subscribe((e) => console.log(e));\n  }\n\n  render() {\n    return (\n       <Layout />\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}